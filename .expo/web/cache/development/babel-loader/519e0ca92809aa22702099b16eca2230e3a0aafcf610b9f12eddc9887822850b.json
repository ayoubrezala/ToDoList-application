{"ast":null,"code":"import API_URL from \"./apiUrl.js\";\nimport fetch from \"node-fetch\";\nvar CREATE_TODO = `\nmutation CreateTodos($input: [TodoCreateInput!]!) {\n  createTodos(input: $input) {\n    todos {\n      id\n      content\n      done\n    }\n  }\n}\n`;\nexport function createTodo(content, todoListId, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: CREATE_TODO,\n      variables: {\n        \"input\": [{\n          \"belongsTo\": {\n            \"connect\": {\n              \"where\": {\n                \"id\": todoListId\n              }\n            }\n          },\n          \"content\": content\n        }]\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.createTodos.todos[0];\n  }).catch(function (error) {\n    console.log('error API', error.message);\n    throw error;\n  });\n}\nvar TODOS = `\nquery Todos($where: TodoWhere) {\n  todos(where: $where) {\n    id\n    content\n    done\n  }\n}\n`;\nexport function getTodos(todoListId, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: TODOS,\n      variables: {\n        \"where\": {\n          \"belongsTo\": {\n            \"id\": todoListId\n          }\n        }\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.todos;\n  }).catch(function (error) {\n    console.log('error API', error.message);\n    throw error;\n  });\n}\nvar UPDATE_TODO = `\nmutation UpdateTodos($where: TodoWhere, $update: TodoUpdateInput) {\n  updateTodos(where: $where, update: $update) {\n    todos {\n      id\n      content\n      done\n    }\n  }\n}`;\nexport function updateTodo(todoId, done, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: UPDATE_TODO,\n      variables: {\n        \"where\": {\n          \"id\": todoId\n        },\n        \"update\": {\n          \"done\": done\n        }\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.updateTodos.todos[0];\n  }).catch(function (error) {\n    console.log('error API', error.message);\n    throw error;\n  });\n}\nvar DELETE_TODO = `\nmutation($id: ID!) {\n  deleteTodos(where: { id: $id }) {\n    nodesDeleted\n  }\n}\n`;\nexport function deleteTodo(id, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: DELETE_TODO,\n      variables: {\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n    return jsonResponse.data.deleteTodos.nodesDeleted;\n  }).catch(function (error) {\n    console.log('error API', error.message);\n    throw error;\n  });\n}","map":{"version":3,"names":["API_URL","fetch","CREATE_TODO","createTodo","content","todoListId","token","method","headers","body","JSON","stringify","query","variables","then","response","json","jsonResponse","errors","data","createTodos","todos","catch","error","console","log","message","TODOS","getTodos","UPDATE_TODO","updateTodo","todoId","done","updateTodos","DELETE_TODO","deleteTodo","id","deleteTodos","nodesDeleted"],"sources":["/home/rezala231/Documents/sd/ToDoList-application/components/todo.js"],"sourcesContent":["import API_URL from \"./apiUrl.js\"\n\nimport fetch from \"node-fetch\"\n\nconst CREATE_TODO = `\nmutation CreateTodos($input: [TodoCreateInput!]!) {\n  createTodos(input: $input) {\n    todos {\n      id\n      content\n      done\n    }\n  }\n}\n`\n\nexport function createTodo(content, todoListId, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: CREATE_TODO,\n      variables: {\n        \"input\": [\n          {\n            \"belongsTo\": {\n              \"connect\": {\n                \"where\": {\n                  \"id\": todoListId\n                }\n              }\n            },\n            \"content\": content\n          }\n        ]\n      }\n    })\n  })\n    .then(response => {\n      return response.json()\n    })\n    .then(jsonResponse => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0]\n      }\n      return jsonResponse.data.createTodos.todos[0]\n    })\n    .catch(error => {\n        console.log('error API', error.message)\n      throw error\n    })\n}\n\nconst TODOS = `\nquery Todos($where: TodoWhere) {\n  todos(where: $where) {\n    id\n    content\n    done\n  }\n}\n`\nexport function getTodos(todoListId, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: TODOS,\n      variables: {\n        \"where\": {\n          \"belongsTo\": {\n            \"id\": todoListId\n          }\n        }\n      }\n    })\n  })\n    .then(response => {\n      return response.json()\n    })\n    .then(jsonResponse => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0]\n      }\n      return jsonResponse.data.todos\n    })\n    .catch(error => {\n        console.log('error API', error.message)\n      throw error\n    })\n}\n\nconst UPDATE_TODO = `\nmutation UpdateTodos($where: TodoWhere, $update: TodoUpdateInput) {\n  updateTodos(where: $where, update: $update) {\n    todos {\n      id\n      content\n      done\n    }\n  }\n}`\nexport function updateTodo(todoId, done, token) {\n    return fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': 'Bearer ' + token\n      },\n      body: JSON.stringify({\n        query: UPDATE_TODO,\n        variables: {\n          \"where\": {\n            \"id\": todoId\n          },\n          \"update\": {\n            \"done\": done\n          }\n        }\n      })\n    })\n      .then(response => {\n        return response.json()\n      })\n      .then(jsonResponse => {\n        if (jsonResponse.errors != null) {\n          throw jsonResponse.errors[0]\n        }\n        return jsonResponse.data.updateTodos.todos[0]\n      })\n      .catch(error => {\n          console.log('error API', error.message)\n        throw error\n      })\n  }\n  \nconst DELETE_TODO = `\nmutation($id: ID!) {\n  deleteTodos(where: { id: $id }) {\n    nodesDeleted\n  }\n}\n`\n\nexport function deleteTodo(id, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: DELETE_TODO,\n      variables: {\n        id: id\n      }\n    })\n  })\n    .then(response => {\n      return response.json()\n    })\n    .then(jsonResponse => {\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0]\n      }\n      return jsonResponse.data.deleteTodos.nodesDeleted\n    })\n    .catch(error => {\n        console.log('error API', error.message)\n      throw error\n    })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}